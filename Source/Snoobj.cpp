//
//  Snoobj.cpp
//  103033241_AS4
//
//  Created by Softcat on 12/26/18.
//  Copyright Â© 2018 NTHU. All rights reserved.
//

#include "Snoobj.hpp"

Snoobj::Snoobj(std::string name){
    _name = name;
    glGenFramebuffers(1, &fbo);
}
void Snoobj::bindStencilBuffer(GLuint ds_map, int width, int height){
    /* This function is used to bind the stencil map generated by Sobj to Snoobj.
     * To use the correct stencil map, you must call this function before beforeDrawQuad().
     */
    glBindFramebuffer(GL_FRAMEBUFFER, fbo);
    //glDeleteRenderbuffers(1, &depth_stencil_map);
    //glGenRenderbuffers(1, &depth_stencil_map);
    //depth_stencil_map = ds_map;
    glBindRenderbuffer(GL_RENDERBUFFER, ds_map);
    glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, width, height);
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, ds_map);
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_STENCIL_ATTACHMENT, GL_RENDERBUFFER, ds_map);
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
}
void Snoobj::reshape(int width, int height){
    glBindFramebuffer(GL_FRAMEBUFFER, fbo);
    // -- depth_stencil_map should be bind to ds_map ot Sobj to reuse the stencil map. -- //
    // -- So we do not delete, generate and bind st_map in reshape function -- //
    // depth + stencil
    /*glDeleteRenderbuffers(1, &depth_stencil_map);
    glGenRenderbuffers(1, &depth_stencil_map);
    glBindRenderbuffer(GL_RENDERBUFFER, depth_stencil_map);
    glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, width, height);
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, depth_stencil_map);
    glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_STENCIL_ATTACHMENT, GL_RENDERBUFFER, depth_stencil_map);*/
    
    // texture map
    glDeleteTextures(1, &texture_map);
    glGenTextures(1, &texture_map);
    glBindTexture(GL_TEXTURE_2D, texture_map);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, NULL);
    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE );
    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE );
    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );
    glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR );
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texture_map, 0);
    
    // bind to fbo
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
}
void Snoobj::beforeDrawQuad(){
    /* This function should be called before drawing the quad without the shadow while masking out the
     * model by applying the stencil map.
     *  1. Enable both stencil test and depth test
     *  2. Bind to fbo
     *  3. Clear color buffer and depth buffer
     *  4. Set stencil test to:
     *      i.   stencil mask: 0x00
     *      ii.  stencil OP
     *      iii. stencil function
     */
    static const GLfloat black[] = { 0.0f, 0.0f, 0.0f, 1.0f };
    static const GLfloat ones[] = { 1.0f };
    
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_STENCIL_TEST);
    
    glBindFramebuffer(GL_FRAMEBUFFER, fbo);
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT);
    glClearBufferfv(GL_COLOR, 0, black);
    glClearBufferfv(GL_DEPTH, 0, ones);
    
    // Setting stencil test
    glStencilMask(0x00);
    glStencilOp(GL_KEEP, GL_KEEP, GL_KEEP);
    glStencilFunc(GL_NOTEQUAL, 1, 0xFF);
}

void Snoobj::afterDrawQuad(){
    /* Dummy function, nothing in here
     *  1. Disable stencil test
     *  2. Bind to default framebuffer
     */
    glStencilMask(0x00);
    glDisable(GL_STENCIL_TEST);
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
}
void Snoobj::log(){
    printf("= = = = = =\n");
    printf("  name:%s\n", _name.c_str());
    printf("  fbo:%d\n", fbo);
    printf("  depth_stencil_map:%d\n", depth_stencil_map);
    printf("  texture_map:%d\n", texture_map);
    printf("= = = = = =\n");
}
void Snoobj::readme(){
    std::cout << std::string("[Snoobj]\n")+
    std::string(" > bindStencilBuffer()\n")+
    std::string(" > beforeDrawQuad()\n")+
    std::string(" >   draw quad\n")+
    std::string(" >   draw model\n")+
    std::string(" > afterDrawQuad()\n")<< std::endl;
}
